#!/usr/bin/env bash
# sysupdate.sh — cross‑distro updater with safety checks, logging, and reboot hints
# Supports: Debian/Ubuntu (apt), Arch (pacman), Fedora/RHEL (dnf), openSUSE (zypper)
# Tek‑style: minimal prompts, sane defaults, clear output

set -euo pipefail
IFS=$'\n\t'

VERSION="1.0.0"
LOG_DIR="/var/log"
LOG_FILE="$LOG_DIR/sysupdate.log"
DRY_RUN=0
QUIET=0
NO_REBOOT_CHECK=0
CLEAN=1

usage() {
  cat <<EOF
Usage: $(basename "$0") [options]

Options:
  -n, --dry-run         Show what would run, don't change anything
  -q, --quiet           Less chatty output
  -k, --no-kernel-check Skip running-vs-installed kernel check
  -c, --no-clean        Don't autoremove/cleanup caches
  -h, --help            This help
  -v, --version         Print version

Examples:
  sudo $(basename "$0")
  sudo $(basename "$0") -n    # plan only
EOF
}

say() { [[ $QUIET -eq 0 ]] && echo -e "$*"; }
log() { echo -e "$(date +'%F %T') | $*" | sudo tee -a "$LOG_FILE" >/dev/null; }
run() { if [[ $DRY_RUN -eq 1 ]]; then say "DRY: $*"; else eval "$@"; fi }

need_root() { if [[ $EUID -ne 0 ]]; then echo "Please run as root (sudo)." >&2; exit 1; fi }

trap 'code=$?; [[ $code -ne 0 ]] && echo "\n[!] Failed with exit $code — see $LOG_FILE" >&2' EXIT

# Ensure log path
if [[ ! -w "$LOG_DIR" ]]; then
  sudo mkdir -p "$LOG_DIR"
  sudo chmod 755 "$LOG_DIR"
fi
: | sudo tee -a "$LOG_FILE" >/dev/null

# Parse args
while [[ ${1-} ]]; do
  case "$1" in
    -n|--dry-run) DRY_RUN=1 ;; 
    -q|--quiet) QUIET=1 ;;
    -k|--no-kernel-check) NO_REBOOT_CHECK=1 ;;
    -c|--no-clean) CLEAN=0 ;;
    -h|--help) usage; exit 0 ;;
    -v|--version) echo "$VERSION"; exit 0 ;;
    *) echo "Unknown option: $1"; usage; exit 2 ;;
  esac
  shift
done

need_root

# Refuse inside containers unless forced
if grep -qE '/(lxc|docker)/' /proc/1/cgroup 2>/dev/null || [[ -f /.dockerenv ]]; then
  say "[!] Container detected; skipping kernel and firmware updates."; NO_REBOOT_CHECK=1
fi

. /etc/os-release
ID_LIKE=${ID_LIKE:-$ID}

say "==> Updating on $PRETTY_NAME"
log "Begin update on $PRETTY_NAME (kernel $(uname -r))"

kernel_hint() {
  [[ $NO_REBOOT_CHECK -eq 1 ]] && return 0
  local run_kern inst_kern msg
  run_kern=$(uname -r)
  case "$ID" in
    ubuntu|debian)
      inst_kern=$(dpkg-query -W -f='${Version}\n' linux-image-$(uname -r | sed 's/-.*//') 2>/dev/null || true)
      ;;
    arch)
      inst_kern=$(pacman -Q linux 2>/dev/null | awk '{print $2}')
      ;;
    fedora|rhel|centos)
      inst_kern=$(rpm -q kernel --qf '%{VERSION}-%{RELEASE}.%{ARCH}\n' | tail -1)
      ;;
    opensuse*|suse*)
      inst_kern=$(rpm -q kernel-default --qf '%{VERSION}-%{RELEASE}.%{ARCH}\n' | tail -1)
      ;;
    *) inst_kern="" ;;
  esac
  if [[ -n "$inst_kern" ]] && ! uname -r | grep -q "${inst_kern%% *}"; then
    say "[!] Running kernel ($run_kern) != latest installed ($inst_kern). Reboot recommended."
    log "Kernel mismatch: running $run_kern vs installed $inst_kern"
  fi
}

case "$ID" in
  ubuntu|debian)
    say "==> apt: update & upgrade"
    run "apt-get update"
    run "apt-get -y dist-upgrade"
    if [[ $CLEAN -eq 1 ]]; then
      run "apt-get -y autoremove --purge"
      run "apt-get -y autoclean"
    fi
    ;;
  arch)
    say "==> pacman: sync & upgrade"
    run "pacman -Syu --noconfirm"
    if [[ $CLEAN -eq 1 ]]; then
      run "paccache -rk2 || true"    # keep 2 versions
      run "pacman -Qtdq | xargs -r pacman -Rns --noconfirm"
    fi
    ;;
  fedora|rhel|centos)
    say "==> dnf: upgrade"
    run "dnf -y upgrade --refresh"
    if [[ $CLEAN -eq 1 ]]; then
      run "dnf -y autoremove"
      run "dnf -y clean all"
    fi
    ;;
  opensuse*|suse*)
    say "==> zypper: refresh & update"
    run "zypper --non-interactive refresh"
    run "zypper --non-interactive update"
    if [[ $CLEAN -eq 1 ]]; then
      run "zypper --non-interactive packages --orphaned | awk 'NR>2{print $3}' | xargs -r zypper --non-interactive remove --clean-deps"
      run "zypper clean --all"
    fi
    ;;
  *)
    echo "Unsupported distro: $ID" >&2; exit 3 ;;

esac

kernel_hint

say "\n==> Done. Log: $LOG_FILE"
log "Completed successfully"

# Optional: check if reboot required (Debian/Ubuntu)
if [[ -f /run/reboot-required ]]; then
  say "[!] Reboot required: /run/reboot-required exists."
  log "Reboot required flag present"
fi
