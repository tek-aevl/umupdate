bash -c '
set -euo pipefail

read -rp "Filename for the tool (installed as /bin/<name>) [kernel-check]: " fname
fname=${fname:-kernel-check}
ts="$(date +%Y%m%d-%H%M%S)"
target="$HOME/$fname"
binpath="/bin/$fname"

# If /bin/$fname exists and points to $HOME/$fname, skip install
if [ -L "$binpath" ] && [ "$(readlink -f "$binpath")" = "$target" ]; then
  echo "Already installed as $binpath -> $target"
else
  # Backup only if file exists and is not the same symlink target
  if [ -e "$binpath" ]; then
    sudo mv "$binpath" "/bin/${fname}.${ts}.bak"
    echo "Backed up $binpath -> /bin/${fname}.${ts}.bak"
  fi

  # Write/update the script in ~/
  cat > "$target" <<"EOF"
#!/bin/sh
# kernel-check: compare the running kernel to the newest installed (via modules dirs)

if [ -t 1 ] && command -v tput >/dev/null 2>&1; then
  RED="$(tput setaf 1)"; YEL="$(tput setaf 3)"; GRN="$(tput setaf 2)"
  MAG="$(tput setaf 5)"; BLU="$(tput setaf 4)"; WHT="$(tput setaf 7)"
  BLD="$(tput bold)"; RST="$(tput sgr0)"
else
  RED=""; YEL=""; GRN=""; MAG=""; BLU=""; WHT=""; BLD=""; RST=""
fi
say() { printf "%s\n" "$*"; }

roots=""
[ -d /usr/lib/modules ] && roots="$roots /usr/lib/modules"
[ -d /lib/modules ]     && roots="$roots /lib/modules"
[ -z "$roots" ] && { say "${RED}No modules directory found.${RST}"; exit 2; }

list_versions() {
  for r in $roots; do ls -1d "$r"/* 2>/dev/null | sed "s#.*/##"; done
}
ver_sort() { sort -V 2>/dev/null || sort; }
uniq_stable() { awk "!seen[\$0]++"; }

RUNNING="$(uname -r)"
ALL="$(list_versions | uniq_stable)"
[ -z "$ALL" ] && { say "${RED}No kernel versions found.${RST}"; exit 2; }
NEWEST="$(printf "%s\n" "$ALL" | ver_sort | tail -n1)"

say "${RED}This text is Red.${RST}"
say "${YEL}This text is Yellow.${RST}"
say "${GRN}This text is Green.${RST}"
say "${MAG}This text is Magenta.${RST}"
say "${BLU}This text is Blue.${RST}"
say "${WHT}This text is White.${RST}"
say "${BLD}Running Kernel:${RST}   $RUNNING"
say "${BLD}Newest Installed:${RST} $NEWEST"

if [ "$RUNNING" = "$NEWEST" ]; then
  say "${GRN}✅ Running kernel matches the newest installed.${RST}"
  exit 0
fi

if [ -d "/usr/lib/modules/$RUNNING" ] || [ -d "/lib/modules/$RUNNING" ]; then
  if sort -V </dev/null >/dev/null 2>&1; then
    FIRST="$(printf "%s\n%s\n" "$RUNNING" "$NEWEST" | ver_sort | head -n1)"
    if [ "$FIRST" = "$RUNNING" ] && [ "$RUNNING" != "$NEWEST" ]; then
      say "${YEL}⚠️ Running kernel is OLDER than newest installed.${RST}"
    else
      say "${YEL}ℹ️ Running kernel differs (flavor or naming).${RST}"
    fi
  else
    say "${YEL}ℹ️ Running kernel differs from newest installed.${RST}"
  fi
  exit 1
fi

say "${RED}❌ Modules dir for running kernel is missing.${RST}"
exit 2
EOF

  chmod +x "$target"
  echo "Wrote $target"
  sudo ln -sfn "$target" "$binpath"
  echo "Symlinked: $binpath -> $target"
fi

# Open for review
if command -v nano >/dev/null 2>&1; then
  nano "$target"
else
  echo "nano not found; skipping editor."
fi

echo "Done. Run with: $fname"
'
