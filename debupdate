#!/bin/bash
echo "#v0.73## To use this in cli use"
echo "sudo nano /bin/usr/update
# copy the next 3 lines into it with, and chmod it to 755  
#!/bin/bash
bash <(curl -s https://git.aevl.net/tek/umupdate/raw/branch/main/debupdate)
echo 'bye'
#To use run
bash update
"
sleep 4

###export SUDO_ASKPASS=/usr/X11R6/bin/ssh-askpass  

# Set the colors
RED='\033[0;31m'       # Red color
LIGHT_RED='\033[0;91m'    # Light red color
YELLOW='\033[0;33m'    # Yellow color
LIGHT_YELLOW='\033[0;93m' # Light yellow color
GREEN='\033[0;32m'     # Green color
LIGHT_GREEN='\033[0;92m'  # Light green color
BLUE='\033[0;34m'         # Blue color
LIGHT_BLUE='\033[0;94m'   # Light blue color
MAGENTA='\033[0;35m'      # Magenta color
CYAN='\033[0;36m'         # Cyan color
WHITE='\033[0;37m'        # White color
LIGHT_GRAY='\033[0;90m'   # Light gray color
DARK_GRAY='\033[0;30m'    # Dark gray color
NC='\033[0m'           # No color
echo -e "This ${RED}text${NC} is ${RED}red.${NC}"
echo -e "This ${YELLOW}text${NC} is ${YELLOW}yellow.${NC}"
echo -e "This ${GREEN}text${NC} is ${GREEN}green.${NC}"
sleep 4

# Get the IP address of the host
HOST_IP=$(hostname -I | awk '{print $1}')

# Display a welcome message
echo -e "${GREEN}Welcome $USER@$HOSTNAME ($HOST_IP)"
sleep 1

# Display system information
echo ":~${HOST_IP} uname -a"
uname -a
sleep 1
echo -e "${NC}"
# Display login history
echo ":~${HOST_IP} last -10"
last -10
sleep 1

# Display information about users currently logged in
echo ":~${HOST_IP} who -a"
who -a
sleep 3

echo -e "${YELLOW} Can you ${RED}sudo${NC}?"
echo -e "${RED} Password $USER@$HOSTNAME ($HOST_IP)  "
# Check if sudo password is needed
sudo -v 2>&1 | grep "Sorry, try again." > /dev/null
if [ $? -eq 0 ]; then
 echo -e "${GREEN}You can Sudo. Right? ${NC}"
sudo sleep 1
else
   echo -e "${YELLOW}Sudo password is required.${NC}"
sudo -A who -a
sleep 2
fi

# Define a list of programs to check
programs=("dialog" "bc" "inxi" "neofetch" "speedtest" "htop" "cron" "nano" "qemu-guest-agent")

# Define the corresponding package names for each program
package_names=("dialog" "bc" "inxi" "neofetch" "speedtest-cli" "htop" "cron" "nano" "qemu-guest-agent")

# Loop through the programs
for ((i=0; i<${#programs[@]}; i++)); do
    program=${programs[i]}
    package_name=${package_names[i]}
    
    # Check if the program is installed
    if ! command -v $program &> /dev/null; then
        # Program is not found, install it
        echo "Installing $package_name..."
        if command -v apt &> /dev/null; then
            sudo apt update
            sudo apt install -y $package_name
        elif command -v pacman &> /dev/null; then
            sudo pacman -Sy $package_name
        else
            echo "Unable to install $package_name. Please install it manually."
        fi
    fi
    echo -e "${GREEN}$package_name Installed ${MAGENTA}!${NC}"
done

echo "get-time $USER@$HOSTNAME ($HOST_IP)"
# Get the current timestamp
current_timestamp=$(date +%s)
echo "do-math $USER@$HOSTNAME ($HOST_IP)"
# Get the timestamp of three days ago
three_days_ago=$(date -d '3 days ago' +%s)

# Get the uptime of the system
echo "uptime $USER@$HOSTNAME ($HOST_IP)"
uptime=$(uptime -s)
# Convert uptime to timestamp
uptime_timestamp=$(date -d "$uptime" +%s)

# Calculate the time difference in seconds
time_difference=$((current_timestamp - uptime_timestamp))

# Convert time difference to days, hours, and minutes
 
uptime_seconds=$(cut -d' ' -f1 /proc/uptime)
uptime_seconds=$(printf "%.0f" "$uptime_seconds")

#days=$(uptime_seconds / 86400)
#hours=$(uptime_seconds % 86400 / 3600)
#minutes=$(uptime_seconds % 3600 / 60)
days=$(echo "$uptime_seconds / 86400" | bc)
hours=$(echo "$uptime_seconds % 86400 / 3600" | bc)
minutes=$(echo "$uptime_seconds % 3600 / 60" | bc)

echo -e "${YELLOW} Current Time variables : $days days, $hours hours, $minutes minutes ${NC}"
sleep 4

# Upgrade and Update the system
echo -e "${GREEN}Running apt update..."
sudo apt update
echo -e "${NC}"

echo -e "${MAGENTA}Running apt upgrade..."
sudo apt upgrade -y
echo -e "${NC}"

echo -e "${CYAN}Running apt autoremove..."
sudo apt autoremove
echo -e "${NC}"

echo -e " ${YELLOW} Script completed.${NC} "

# Get the running kernel version
version=$(uname -r)
echo "Running kernel $version"
# Extract major version using regular expression
if [[ $version =~ ^([0-9]+\.[0-9]+\.[0-9]+).* ]]; then
    version="${BASH_REMATCH[1]}"
   else
  echo -e "${RED} Warning!!!${NC}"
  echo -e "${RED}Invalid version format${NC}"
sleep 10
fi
running_kernel=$version
# Get the installed kernel version
installed_kernel=$(dpkg --list | grep "linux-image" | awk '{print $3}' | awk -F'-' '{print $1}' | sort -V | tail -n1)
# Input version string
version=""
version=$(dpkg --list | grep "linux-image" | awk '{print $3}' | awk -F'-' '{print $1}' | sort -V | tail -n1)
echo -e "${YELLOW}Running kernel   ${BLUE}: $running_kernel ${NC}"
echo -e "${YELLOW}Installed kernel ${BLUE}: $installed_kernel ${NC}"

# Extract major version using regular expression
if [[ $version =~ ^([0-9]+\.[0-9]+\.[0-9]+).* ]]; then
  version="${BASH_REMATCH[1]}"
else
  echo -e "${RED}Invalid version format, is this linux real?${NC}"
  echo -e "${LIGHT_RED}Skipping${NC}"
fi
installed_kernel=$version
if [[ $running_kernel != $installed_kernel ]]; then
  echo "pick $USER@$HOSTNAME ($HOST_IP)" &&  uname -a
  read -p "The running kernel ($running_kernel) differs from the installed kernel ($installed_kernel). Do you want to reboot? (y/N): " choice
  if [[ $choice == [Yy] ]]; then
    echo -e "${RED}Rebooting...${NC}"
       echo -e "L8r $USER@$HOSTNAME ($HOST_IP)"
    # Uncomment the following line to perform the reboot
    sleep 3 
      sudo reboot
  else
    echo -e "${LIGHT_RED}Reboot denied.${NC}"  
     sleep 3 
    echo "  $USER@$HOSTNAME ($HOST_IP)"
  fi
else
echo -e "${GREEN}Running   version >>: $running_kernel ${NC}"
inxi
echo -e "${BLUE}Installed version >>: $installed_kernel ${NC}"
uname -a
sleep 1 
echo -e "The running kernel $running_kernel ${GREEN}matches${NC} the installed kernel $installed_kernel. ${YELLOW}No reboot required.${NC}"
  
if [[ $uptime_seconds -ge $((3 * 24 * 3600)) ]]; then

echo -e "${RED} The system has been running for longer than three days. ${NC}"  
echo -e "${YELLOW} System uptime: $days days, $hours hours, $minutes minutes ${NC}"
    read -p "Would you like to reboot now? (Y/n): " choice
    if [[ $choice != [Nn] ]]; then
      echo -e "${RED} Rebooting... $USER @ $HOSTNAME ($HOST_IP) ${NC}"
      # Uncomment the following line to perform the reboot
          sleep 2
          sudo reboot
    else
      echo -e "${RED} Reboot skipped. $USER@$HOSTNAME ($HOST_IP) ${NC} " && sleep 3
    fi
  else

echo -e "${GREEN} So good news! ${NC} $USER@$HOSTNAME ($HOST_IP)"   
echo -e " The system has ${GREEN}not${NC} been running for longer than ${YELLOW}three${NC} days. ${RED}No reboot required. ${NC}"
uptime
echo -e "${GREEN} System uptime: $days days, $hours hours, $minutes minutes ${NC}"
echo "uptime $USER@$HOSTNAME ($HOST_IP)"
uptime
sleep 3
    # Default to "no" if running for less than three days
    read -p "Reboot Anyway? (y/N): " choice
    if [[ $choice == [Yy] ]]; then
      echo -e "${RED} Rebooting... after 10 sec $USER@$HOSTNAME ($HOST_IP) ${NC}"
       sleep 4 
       neofetch
       inxi  
       uname -a
      echo -e " ${RED} byah $USER@$HOSTNAME $HOST_IP ${NC} " && sleep 3
       sudo reboot
    else
      echo -e "${GREEN} Reboot Skipped. $USER@$HOSTNAME ($HOST_IP) ${NC}"
    fi
  fi
fi

echo -e "${YELLOW}Speedtest!${NC}" 
nettest="no"
read -p "Speedtest? (y/n): ($nettest) " nettest

if [[ -n $nettest ]]; then
    if [[ $nettest == "yes" ]] || [[ $nettest == "y" ]]; then
        echo "$USER@$HOSTNAME speedtest"
        speedtest --secure
        sleep 3
    elif [[ $nettest == "no" ]] || [[ $nettest == "n" ]]; then
        echo -e "${GREEN} Not running speedtest : System uptime: $days days, $hours hours, $minutes minutes ${NC}" 
        sleep 4
    else
        echo -e "${YELLOW}Invalid input.${NC}"
    fi
else
    echo -e "${YELLOW}No input received. Using default value $nettest.${NC}"
fi


echo $USER "@" $HOSTNAME
who -a && last -n 6
neofetch
inxi
uname -a
echo -e "Current Running kernel ($running_kernel) ; Current Installed kernel ($installed_kernel)."
echo -e "${GREEN} Byah.!. $USER@$HOSTNAME ($HOST_IP) ${NC}"
sleep 6
exit;