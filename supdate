#!/bin/bash
echo "#v.94# To use this in cli use
sudo nano /bin/usr/update
# copy the next 3 lines into it with, and chmod it to 755
#!/bin/bash
bash <(curl -c https://github.com/tek-aevl/umupdate/raw/refs/heads/main/supdate)
echo 'bye'
###above###
"
echo "#To use run"
echo "bash update"
sleep 2
echo "setting functions"
#Function to check and copy SSH key to a remote host if needed
function copy_ssh_key() {
    if [[ ! -f ~/.ssh/id_rsa.pub ]]; then
        echo "SSH key not found. Generating a new SSH key..."
        ssh-keygen -t rsa
    fi
    # Check if the SSH key is already present on the remote host
   if ! ssh-add -L | grep -qF "$(cat ~/.ssh/id_rsa.pub)"; then
        #read -p "Enter the IP address or hostname of the remote host: " ip
       echo "Current client $ip"
        ssh-copy-id "$ip"
    else
        echo "SSH key is already copied to the remote host. No need to copy again."
    fi
}

# Function to check if Pi-hole is installed and running on a host
function check_pihole {
  # Check if the Pi-hole service is running
  if ssh -q -o ConnectTimeout=1 $1 "systemctl is-active pihole-FTL.service &> /dev/null"; then
    # Check if the Pi-hole web interface is accessible
    if curl -s -I -H "Host: pi.hole" http://$1/admin/ &> /dev/null; then
      return 0  # Pi-hole is installed and running
    fi
  fi
  return 1  # Pi-hole is not installed or not running
}
echo "...done..."

# Function to prompt the user for ARP inclusion
prompt_arp() {
    read -p "Do you want to include ARP in the IP list? (Y/N): " choice
    case "$choice" in
        [yY] | [yY][eE][sS])
            echo "Retrieving ARP table"
           if [ -f ~/arp_ip_list ]; then
           echo "ARP List"
           cat ~/arp_ip_list |less
               read -p "~/arp_ip_list already exists. Do you want to overwrite it? (y/n): " overwrite
                  if [ "$overwrite" = "y" ]; then
                   arp_ip_list=$(arp -av | awk '{print $2}' | sed 's/[()]//g')
                   echo "$arp_ip_list" > ~/arp_ip_list
                   echo "$arp_ip_list is the new list."
                   sleep 3
                  else
                    arp_ip_list=$(<~/arp_ip_list)
                    echo "No changes made to $arp_ip_list ..."
                    sleep 3                  
                  fi
                else
                  arp_ip_list=$(<~/arp_ip_list)
              echo " $arp_ip_list " 
              exho " .loaded. "
            sleep 3
          fi
          echo "$arp_ip_list" 
          echo "...done..."          
            sleep 8
            ;;
        [nN] | [nN][oO])
            arp_ip_list=""
            ;;
        *)
            echo "Invalid choice. Defaulting to no ARP."
            arp_ip_list=""
            ;;
    esac
}

prompt_arp


# Get the default route interface
default_interface=$(ip route | awk '/default/ {print $5}')

# Get the IP address and subnet mask of the default route interface
interface_info=$(ip a show dev "$default_interface" | awk '/inet\s/ {print $2}')
interface_ip=$(echo "$interface_info" | cut -d '/' -f 1)
interface_subnet=$(echo "$interface_info" | cut -d '/' -f 2)

# Calculate network address and subnet mask length
IFS='.' read -r -a ip_parts <<< "$interface_ip"
netmask_length=$(printf "%.*s1" "$interface_subnet" "11111111111111111111111111111111")
network_address=$(printf "%d.%d.%d.%d\n" "$((ip_parts[0] & 0xFF & (0xFF << (32 - interface_subnet))))" \
                                       "$((ip_parts[1] & 0xFF & (0xFF << (32 - interface_subnet))))" \
                                       "$((ip_parts[2] & 0xFF & (0xFF << (32 - interface_subnet))))" \
                                       "$((ip_parts[3] & 0xFF & (0xFF << (32 - interface_subnet))))")

# Get the list of clients on the same subnet as the default route interface
bridge_clients_default=$(ip neigh show dev "$default_interface" | awk -v network="$network_address" '{if ($1 ~ network) print $1}')
echo "Bridge clients on the same subnet as the default route interface ($default_interface):"
echo "$bridge_clients_default" | more 
echo "Retrieving active clients over the bridge"
# Retrieve active clients in the bridge
bridge_clients=$(ip neigh show dev virbr0 | awk '{print $1}') && echo $bridge_clients
echo "$bridge_clients ...done..."
sleep 3

echo "Retrieve Tailscale client IP addresses"
# Retrieve Tailscale client IP addresses from 'tailscale status' command
##old# tailscale_ip_list=$(tailscale status | grep -oE '10\.[0-9]+\.[0-9]+\.[0-9]+')
tailscale_ip_list=$(sudo tailscale status | grep -Eo '100\.[0-9]+\.[0-9]+\.[0-9]+' | awk '!seen[$0]++')
echo "Tailscale Client List"
echo "$tailscale_ip_list"
echo ".!.done.!."
sleep 3

echo "Retrieving custom_ip_list"
# custom list put the next line in a new file called custom_ip_list
#custom_ip_list="0.0.0.0"$'\n'"0.0.0.0"
custom_ip_list=$(grep -E -o '([0-9]{1,3}\.){3}[0-9]{1,3}' ~/custom_ip_list)
cat ~/custom_ip_list
echo "custom_list" && sleep 2
echo "$custom_ip_list  ...done..."
sleep 3

echo "Retrieving ignore_ip_list"
ignore_ip_list=$(grep -E -o '([0-9]{1,3}\.){3}[0-9]{1,3}' ~/ignore_ip_list)

# Check if there are any IP addresses found before creating the file
if [[ -n "$ignore_ip_list" ]]; then
    # Use printf for better portability and to handle special characters properly
    printf "%s\n" "$ignore_ip_list" > ~/ignore_list.txt
fi

echo "ignore list created" && sleep 2

# Combine the IP lists based on user choice
if [ -n "$arp_ip_list" ]; then
    ip_list="$bridge_clients_default"$'\n'"$bridge_clients"$'\n'"$custom_ip_list"$'\n'"$arp_ip_list"$'\n'"$tailscale_ip_list"
else
    ip_list="$bridge_clients_default"$'\n'"$bridge_clients"$'\n'"$custom_ip_list"$'\n'"$tailscale_ip_list"
fi


echo "$ip_list ...ip list..."
sleep 5

echo "Removing IPs listed in the ignore list sorting then removing duplicates"
while IFS= read -r ip; do
    ip_list=$(echo "$ip_list" | grep -vFx "$ip")
done < ignore_list.txt

 ip_list=$(echo "$ip_list" | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | sort -u) 
 ip_list=$(echo "$ip_list" | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | sort -u)

 
# Step 4: Output the final combined list
echo "#####Final combined list:#####"
echo "$ip_list" | less
sleep 5

echo "Running updates!"
# Iterate over each IP address and perform SSH connection
for ip in $ip_list; do
    # Perform SSH connection to the device
     echo "Connecting to $ip"
     # Call ssh-copy-id function
#off#    copy_ssh_key
    if check_pihole $ip; then
      echo -e "Pi-hole detected on $ip "
ssh -yt $ip "(curl -s https://github.com/tek-aevl/umupdate/raw/refs/heads/main/update)|bash"
      #ssh -yt $ip "(curl -s https://git.aevl.net/tek/umupdate/raw/branch/main/update)|bash"
     # ssh -tY $ip "bash <(curl -s https://git.aevl.net/Tek/umupdate/raw/branch/main/logreset)"
    else
      echo -e "Running Updates on $ip "

  if ssh -tY $ip "bash /bin/update"; then
       #ssh -tY $ip "bash update"
       echo "Success!"
    else
 #if not installed run remote.
ssh -tY $ip "bash <(curl -s https://github.com/tek-aevl/umupdate/raw/refs/heads/main/update)"   
#ssh -tY $ip "bash <(curl -s https://git.aevl.net/tek/umupdate/raw/branch/main/update)"
  fi
    # ssh -tY $ip "bash <(curl -s https://git.aevl.net/tek/umupdate/raw/branch/main/logreset)"
fi
done
