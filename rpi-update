#!/bin/bash
clear
echo "#v.037# To use this in cli use"
echo "sudo nano /bin/usr/update
# copy the next 3 lines into it with, and chmod it to 755  
#!/bin/bash
bash <(curl -s https://git.aevl.net/tek/umupdate/raw/branch/main/rpi-update)
echo 'bye'
#To use run
bash update
";
sleep 4
# Set the colors
RED='\033[0;31m'       # Red color
YELLOW='\033[0;33m'    # Yellow color
GREEN='\033[0;32m'     # Green color
NC='\033[0m'           # No color
echo -e "This ${RED}text${NC} is ${RED}red.${NC}"
echo -e "This ${YELLOW}text${NC} is ${YELLOW}yellow.${NC}"
echo -e "This ${GREEN}text${NC} is ${GREEN}green.${NC}"
sleep 4

echo -e "Welcome " $USER "@" $HOSTNAME "${GREEN}"

# Define a list of programs to check
programs=("dialog" "bc" "inxi" "neofetch" "speedtest" "htop" "cron")

# Define the corresponding package names for each program
package_names=("dialog" "bc" "inxi" "neofetch" "speedtest-cli" "htop" "cron")

# Loop through the programs
for ((i=0; i<${#programs[@]}; i++)); do
    program=${programs[i]}
    package_name=${package_names[i]}
    
    # Check if the program is installed
    if ! command -v $program &> /dev/null; then
        # Program is not found, install it
        echo "Installing $package_name..."
        if command -v apt &> /dev/null; then
            sudo apt update
            sudo apt install -y $package_name
        elif command -v pacman &> /dev/null; then
            sudo pacman -Sy $package_name
        else
            echo "Unable to install $package_name. Please install it manually."
        fi
    fi
    echo -e "${GREEN}$package_name Installed ${MAGENTA}!${NC}"
done


echo -e "${NC}"
# Get the uptime of the system
uptime=$(uptime -s)

# Get the current timestamp
current_timestamp=$(date +%s)

# Convert uptime to timestamp
uptime_timestamp=$(date -d "$uptime" +%s)

# Calculate the time difference in seconds
time_difference=$((current_timestamp - uptime_timestamp))

# Convert time difference to days, hours, and minutes
days=$((time_difference / 86400))
hours=$(( (time_difference % 86400) / 3600 ))
minutes=$(( (time_difference % 3600) / 60 ))

echo -e "${GREEN}Pihole Updates!${NC}"

if dpkg -s pihole &> /dev/null; then
    # Pi-hole is installed, run the commands
    pihole arpflush
    pihole restartdns
    pihole -g
    pihole restartdns
    pihole -up
fi 

if [[ $days -ge 3 ]]; then
    force_log_reset="[yes]"
    else
    force_log_reset="[no]"
fi


echo $USER "@" $HOSTNAME
echo -e "${YELLOW}System uptime: $days days, $hours hours, $minutes minutes ${NC}" 
echo -e "${RED}Reset logs anyway?${NC}"

read -e -i "$force_log_reset" -p "Force log reset? (yes/no): " force_log_reset
if [[ $force_log_reset == "yes ]] || [[ $force_log_reset == "y" ]]; then
 echo -e "${RED}Flush was selected.${NC}"
 echo -e "${YELLOW}Flushing Logs${NC}"
 echo "# output current pihole db size"
 sudo du -h /etc/pihole/pihole-FTL.db -h
 echo "# current old db size"
 sudo du -h /etc/pihole/pihole-FTL-old.db -h
 echo "#pihole flush"
 pihole flush
 echo "# Output pihole db size"
 sudo du -h /etc/pihole/pihole-FTL.db -h
 sudo rm /etc/pihole/pihole-FTL-old.db 
sleep 3
 echo "# Stop pihole FTL service"
 sudo systemctl stop pihole-FTL
 echo "# Delete the FTL database file"
 sudo service pihole-FTL stop
echo "moving current db to old db"
 sudo mv /etc/pihole/pihole-FTL.db /etc/pihole/pihole-FTL-old.db
 sudo service pihole-FTL start
 echo "# Start pihole FTL service"
 sudo systemctl start pihole-FTL
 echo "# Output reduced pihole db size"
 sudo du -h /etc/pihole/pihole-FTL.db -h
 sudo du -h /etc/pihole/pihole-FTL-old.db -h
sleep 8
elif  [[ $force_log_reset == "no" ]] || [[ $force_log_reset == "n" ]]; then
  echo -e "The system has ${RED}not${NC} been running for longer than three days. ${GREEN}No db operations required.${NC}"
  echo -e "${GREEN}System uptime: $days days, $hours hours, $minutes minutes ${NC}" 
  sleep 4
else
    echo -e "${YELLOW}Invalid input.${NC}"
fi


uptime; sleep 3; echo -e "${YELLOW}Resuming!${NC}" 
echo $USER "@" $HOSTNAME "speedtest"
speedtest --secure
echo who -a && last -n 6
sleep 3
# Get the installed kernel version
installed_kernel=$(uname -r)

# URL to the Raspberry Pi kernel repository
url="https://api.github.com/repos/raspberrypi/linux"

# Get the repository information
repo_info=$(curl -s "$url")

uname -a
# Extract the default branch
default_branch=$(echo "$repo_info" | grep -m 1 '"default_branch":' | cut -d'"' -f4)
# Extract the version number from the default branch
latest_kernel=$(echo "$default_branch" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | cut -d'.' -f1)
echo "latest: $latest_kernel"
echo "default: $default_branch"
sleep 5

# Get the system uptime in seconds
uptime_timestamp=$(printf "%.0f" $(cut -d' ' -f1 /proc/uptime))

uname -a
echo -e "${YELLOW}l8r ! " $USER "@" $HOSTNAME "${NC}"
neofetch
inxi
sleep 3
# Get the uptime of the system
uptime=$(uptime -s)

# Get the current timestamp
current_timestamp=$(date +%s)

# Convert uptime to timestamp
uptime_timestamp=$(date -d "$uptime" +%s)

# Calculate the time difference in seconds
time_difference=$((current_timestamp - uptime_timestamp))

# Convert time difference to days, hours, and minutes
days=$((time_difference / 86400))
hours=$(( (time_difference % 86400) / 3600 ))
minutes=$(( (time_difference % 3600) / 60 ))

# Check if the system has been running for longer than three days
if [[ $time_difference -ge $((3 * 24 * 3600)) ]]; then
  echo -e "${RED} WARNING! ${YELLOW}The system has been running for longer than three days.${NC}"
  uptime
  echo -e "${RED}System uptime: $days days, $hours hours, $minutes minutes "
if [[ $running_kernel != $installed_kernel ]]; then
    read -p "The running kernel ($running_kernel) differs from the installed kernel ($installed_kernel). Do you want to reboot? (Y/n): " choice
if [[ $choice != [Nn] ]]; then
    echo -e "${RED}Rebooting...${NC}"
      echo $USER "@" $HOSTNAME
      # Uncomment the following line to perform the reboot
       sudo reboot
    else
      echo -e "${RED}Reboot denied.${NC}"
    fi
  else
    echo -e "The running kernel ($running_kernel) ${GREEN}matches${NC} the installed kernel ($installed_kernel). ${GREEN}No reboot required.${NC}"
  fi
else
  echo -e "The system has ${GREEN}not${NC} been running for longer than ${YELLOW}three${NC} days. ${GREEN}No reboot required.${NC}"
  echo -e "${GREEN}System uptime: $days days, $hours hours, $minutes minutes${NC}"

# Default to "no" if running for less than three days
  read -p "Do you want to reboot? (y/N): " choice
  if [[ $choice == [Yy] ]]; then
    echo -e "${RED}Rebooting...${NC}"
    echo '$USER "@" $HOSTNAME'
    # Uncomment the following line to perform the reboot
     sudo reboot
  else
    echo -e "${YELLOW}Reboot skipped${NC}."
  fi
fi

echo -e " $USER @ $HOSTNAME "
neofetch
inxi
uname -a
echo -e "Current Running kernel ($running_kernel) ; Current Installed kernel ($installed_kernel)."
echo -e "${GREEN}fin ;p  ;-p ${NC}"; 
