#!/bin/bash
version="1.66.1"
echo "Hello ! #v"$version"#"
echo "Info at https://git.aevl.net/tek/umupdate #To use run # bash update or bash <(curl -s https://git.aevl.net/tek/umupdate/raw/branch/main/update)"
if [ -f "/bin/update" ]; then
   installed_version=$(grep -oP '(?<=#)\S+(?=#)' /bin/update)
   echo "Installed Version is "$installed_version
   if [ "$installed_version" == "$version" ]; then
       echo "Version matches!"
   else
       echo "Version mismatch! Installed version: $installed_version"
       echo "The file /bin/update already exists."
       read -p "Do you update to a new version? (Y/n): " choice 
       choice="${choice:-y}"
       if [ "$choice" == "y" ]; then
           echo "Removing old"
           sudo mkdir /bin/update.old
           sudo mv /bin/update "/bin/update.old/$(date '+%Y%m%d%H%M%S').update"
           echo $USER"@"$HOSTNAME
           sleep 3
           echo "Fetching the new bash script"
           curl -sO "https://git.aevl.net/tek/umupdate/raw/branch/main/update" && chmod +x update && ./update
           echo "Bye! $USER@$HOSTNAME "
           exit;
       else
           echo "Cancelled."
       fi
   fi
else
    echo "The file /bin/update does not exist."
    read -p "Do you want to install it? (y/n): " -e choice
    if [ "$choice" == "y" ]; then
echo -e '#!/bin/bash\n echo "#'$version'#"\n echo "Hello! $USER@$HOSTNAME "\n echo "Assistance at https://git.aevl.net/tek/umupdate" #To use run\n echo "bash update"\n bash <(curl -s https://git.aevl.net/tek/umupdate/raw/branch/main/update)\n echo $USER "bye! XD "' | sudo tee /bin/update > /dev/null

        sudo chmod 644 /bin/update
        sudo chmod +x /bin/update
        echo "Verifying contents"
        cat /bin/update
        echo "Installed /bin/update successfully."
        sleep 6
    else
        echo "Installation cancelled."
    fi
fi

# Set the colors
RED='\033[0;31m'       # Red color
LIGHT_RED='\033[0;91m'    # Light red color
YELLOW='\033[0;33m'    # Yellow color
LIGHT_YELLOW='\033[0;93m' # Light yellow color
GREEN='\033[0;32m'     # Green color
LIGHT_GREEN='\033[0;92m'  # Light green color
BLUE='\033[0;34m'         # Blue color
LIGHT_BLUE='\033[0;94m'   # Light blue color
MAGENTA='\033[0;35m'      # Magenta color
CYAN='\033[0;36m'         # Cyan color
WHITE='\033[0;37m'        # White color
LIGHT_GRAY='\033[0;90m'   # Light gray color
DARK_GRAY='\033[0;30m'    # Dark gray color
NC='\033[0m'           # No color
echo -e "This ${RED}text${NC} is ${RED}red.${NC}"
echo -e "This ${YELLOW}text${NC} is ${YELLOW}yellow.${NC}"
echo -e "This ${GREEN}text${NC} is ${GREEN}green.${NC}"
sleep 1

# Get the IP address of the host
HOST_IP=$(hostname -I | awk '{print $1}')

# Display a welcome message
echo -e "${GREEN}Welcome $USER@$HOSTNAME ($HOST_IP)"
sleep 1

# Display system information
echo ":~${HOST_IP} uname -a"
uname -a
sleep 1
echo -e "${NC}"
# Display login history
echo ":~${HOST_IP} last -10"
last -10
sleep 1

# Display information about users currently logged in
echo "~${HOST_IP} who -a"
who -a
sleep 3

echo -e "${YELLOW} Can you ${RED} sudo${NC}?"
echo -e "${RED} Password $USER@$HOSTNAME ($HOST_IP) "
# Check if sudo password is needed
sudo -v 2>&1 | grep "Sorry, try again." > /dev/null
if [ $? -eq 0 ]; then
 echo -e "${GREEN}You can Sudo. Right?${NC}"
last 5
sudo sleep 1
#if sudo -v 2>&1;then 
   echo -e "${YELLOW}Sudo password is required.${NC}"
sudo who -a
sudo sleep 2
fi

# Programs needed in order to use this script.
      programs=("dialog" "bc" "speedtest"     "htop" "cron" "nano" "fail2ban" "ncdu")

# Define the corresponding package names for each program
 package_names=("dialog" "bc" "speedtest-cli" "htop" "cron" "nano" "fail2ban" "ncdu")

# Define the corresponding package names for each program
programs2delete=("")
package_delete=("")

# Loop through the programs  ###for ((i=0; i<${#programs2delete[@]};# i++));# do
for i in "${!programs2delete[@]}"; do
    program=${programs2delete[i]}
    package_name=${package_delete[i]}
        # Check if the program is installed then remove.
    if ! command -v $program &> /dev/null; then
        # Program is found, remove it
        echo "Uninstalling $package_name..."
        if command -v pacman &> /dev/null; then
            sudo pacman -R $package_name
        elif command -v apt &> /dev/null; then
            sudo apt remove -y $package_name
        elif command -v dnf &> /dev/null; then  # Add support for Fedora
            sudo dnf remove -y $package_name
        elif command -v pkg &> /dev/null; then  # Add support for FreeBSD
            sudo pkg remove -y $package_name
        elif command -v zypper &> /dev/null; then  # Add support for openSUSE
            sudo zypper remove -y $package_name
        elif command -v pacman &> /dev/null; then  # Add support for Archlinux
            sudo pacman -R $package_name
        else
            echo "Unable to remove $package_name. Please remove it manually."
        fi
    fi
    echo -e "${NC}! ${GREEN} $package_name Removed${MAGENTA}!"
done
echo -e " ;-P ${NC} "

# Loop through the programs
for i in "${!programs[@]}"; do
    program=${programs[i]}
    package_name=${package_names[i]}
    
    # Check if the program is installed
    if ! command -v $program &> /dev/null; then
        # Program is not found, install it
        echo "Installing $package_name..."
        if command -v pacman &> /dev/null; then # Archlinux support
            sudo pacman -Sy --noconfirm $package_name
        elif command -v apt &> /dev/null; then
            sudo apt install -y $package_name
        elif command -v dnf &> /dev/null; then  # Add support for Fedora
            sudo dnf install -y $package_name
        elif command -v pkg &> /dev/null; then  # Add support for FreeBSD
            sudo pkg install -y $package_name
        elif command -v zypper &> /dev/null; then  # Add support for openSUSE
            sudo zypper install -y $package_name
        else
            echo "Unable to install $package_name. Please install it manually."
        fi
    fi
    echo -e "${NC}! ${GREEN} $package_name Installed ${MAGENTA}!"
done
echo -e ";-P${NC}"

echo "get-time $USER@$HOSTNAME ($HOST_IP)"
# Get the current timestamp
current_timestamp=$(date +%s)
echo "do-math $USER@$HOSTNAME ($HOST_IP)"
# Get the timestamp of three days ago
three_days_ago=$(date -d '3 days ago' +%s)

# Get the uptime of the system
echo "uptime $USER@$HOSTNAME ($HOST_IP)"
uptime=$(uptime -s)
# Convert uptime to timestamp
uptime_timestamp=$(date -d "$uptime" +%s)

# Calculate the time difference in seconds
time_difference=$((current_timestamp - uptime_timestamp))

# Convert time difference to days, hours, and minutes
 
uptime_seconds=$(cut -d' ' -f1 /proc/uptime)
uptime_seconds=$(printf "%.0f" "$uptime_seconds")

#days=$(uptime_seconds / 86400)
#hours=$(uptime_seconds % 86400 / 3600)
#minutes=$(uptime_seconds % 3600 / 60)
days=$(echo "$uptime_seconds / 86400" | bc)
hours=$(echo "$uptime_seconds % 86400 / 3600" | bc)
minutes=$(echo "$uptime_seconds % 3600 / 60" | bc)

echo -e "${RED} Current Time variables : $days days, $hours hours, $minutes minutes ${NC}"
sleep 4


if [[ $days -ge 3 ]]; then
   force_log_reset="yes"
    echo -e "${RED}System uptime: $days days, $hours hours, $minutes minutes ${NC}" 
    else
    force_log_reset="no"
    echo -e "${YELLOW}System uptime: $days days, $hours hours, $minutes minutes ${NC}" 
fi

if pihole -v &> /dev/null; then 
echo -e "${GREEN}Pihole Updates!${NC}"

    # Pi-hole is installed, run the commands
echo "arpflush"
    pihole arpflush
echo "restartdns"
    pihole restartdns
echo "-g"
    pihole -g
echo "restartdns"
    pihole restartdns
echo "-up"
    pihole -up
echo "complete"

echo $USER "@" $HOSTNAME

echo -e "${CYAN} Automatically selected $force_log_reset ${NC}"
sleep 2

echo -e "${RED}Reset logs anyway? ( $force_log_reset ) ${NC}"
read -p "Force log reset? (y/n): " override

if [[ -n $override ]]; then
    force_log_reset=$override
else
    echo -e "${YELLOW}No input received. Using default value $force_log_reset .${NC}"
fi

if [[ $force_log_reset != "no" && $force_log_reset != "n" ]]; then
   echo -e "${RED} $force_log_reset was selected.${NC}"
   echo -e "${YELLOW}Flushing Logs${NC}"
   echo "# output current pihole db size"
        sudo du -h /etc/pihole/pihole-FTL.db -h
   echo "# current old db size"
        sudo du -h /etc/pihole/pihole-FTL-old.db -h
   echo "#pihole flush"
      pihole flush
   echo "# Output pihole db size"
        sudo du -h /etc/pihole/pihole-FTL.db -h
        sudo rm /etc/pihole/pihole-FTL-old.db 
      sleep 3
    echo "# Stop pihole FTL service"
        sudo systemctl stop pihole-FTL
    echo "# Delete the FTL database file"
        sudo service pihole-FTL stop
    echo "moving current db to old db"
        sudo mv /etc/pihole/pihole-FTL.db /etc/pihole/pihole-FTL-old.db
        sudo service pihole-FTL start
    echo "# Start pihole FTL service"
        sudo systemctl start pihole-FTL
    echo "# Output reduced pihole db size"
        sudo du -h /etc/pihole/pihole-FTL.db -h
        sudo du -h /etc/pihole/pihole-FTL-old.db -h
    sleep 8
elif [[ $force_log_reset != "yes" && $force_log_reset != "y" ]]; then
  echo -e "The system has ${RED}not${NC} been running for longer than three days. ${GREEN}No db operations required.${NC}"
  echo -e "${GREEN}System uptime: $days days, $hours hours, $minutes minutes ${NC}" 
  sleep 4
else
    echo -e "${YELLOW}Invalid input.${NC}"
fi
fi 


# Define the package manager update/upgrade commands
update_command=""
upgrade_command=""

# Check which package manager is available
if command -v pacman &> /dev/null; then
    update_command="sudo pacman -Syyu --noconfirm"
    upgrade_command="sudo pacman -Syyu --noconfirm"
elif command -v apt &> /dev/null; then
    update_command="sudo apt update"
    upgrade_command="sudo apt upgrade -y" 
    #secret#
    echo -e  "${YELLOW}autoremove"
    sudo apt autoremove -y
    echo -e  "${NC}"
    echo -e "${GREEN}Running apt autoremove..."
    sudo apt autoremove
    echo -e "${NC}"
elif command -v pacman &> /dev/null; then
    update_command="sudo pacman -Syu"
    upgrade_command="sudo pacman -Syyu --noconfirm"
elif command -v dnf &> /dev/null; then
    update_command="sudo dnf check-update"
    upgrade_command="sudo dnf upgrade -y"
elif command -v pkg &> /dev/null; then
    update_command="sudo pkg update"
    upgrade_command="sudo pkg upgrade -y"
elif command -v zypper &> /dev/null; then
    update_command="sudo zypper refresh"
    upgrade_command="sudo zypper update -y"
elif command -v pacman &> /dev/null; then
    update_command="sudo pacman -Syyu"
    upgrade_command="sudo pacman -Syu"
else
    echo "Unable to determine the package manager. Please update and upgrade manually."
    exit 1
fi

# Update the system
echo "Updating packages..."
$update_command

# Upgrade the system
echo "Upgrading packages..."
$upgrade_command

echo -e " ${GREEN} Script completed.${NC} "
sleep 1
# Get the running kernel version
version=$(uname -r)
echo "Running kernel $version"
# Extract major version using regular expression
if [[ $version =~ ^([0-9]+\.[0-9]+\.[0-9]+).* ]]; then
    version="${BASH_REMATCH[1]}"
   else
  echo -e "${RED} Warning!!!${NC}"
  echo -e "${RED}Invalid version format${NC}"
sleep 10
fi
running_kernel=$version

# Get the installed kernel version
installed_kernel=$(dpkg --list | grep "linux-image" | awk '{print $3}' | awk -F'-' '{print $1}' | sort -V | tail -n1)

# Input version string
version=""
version=$(dpkg --list | grep "linux-image" | awk '{print $3}' | awk -F'-' '{print $1}' | sort -V | tail -n1)
echo -e "${YELLOW}Running kernel   ${BLUE}: $running_kernel ${NC}"
echo -e "${YELLOW}Installed kernel ${BLUE}: $installed_kernel ${NC}"

# Extract major version using regular expression
if [[ $version =~ ^([0-9]+\.[0-9]+\.[0-9]+).* ]]; then
  version="${BASH_REMATCH[1]}"
else
  echo -e "${RED}Invalid version format, is this linux real?${NC}"
   echo -e "${LIGHT_RED}Final test ${NC}"
   bash <(curl -s https://git.aevl.net/tek/umupdate/raw/branch/main/kernelchk)
fi
installed_kernel=$version
if [[ $running_kernel != $installed_kernel ]]; then
  echo "pick $USER@$HOSTNAME ($HOST_IP)" &&  uname -a
  read -p "The running kernel ($running_kernel) differs from the installed kernel ($installed_kernel). Do you want to reboot? (y/N): " choice
  if [[ $choice == [Yy] ]]; then
    echo -e "${RED}Rebooting...${NC}"
       echo -e "L8r $USER@$HOSTNAME ($HOST_IP)"
    # Uncomment the following line to perform the reboot
    sleep 3 
      echo "${RED}Rebooting....${NC}"
      sudo reboot
      sleep 10
  else
    echo "  $USER@$HOSTNAME ($HOST_IP)"
    echo -e "${LIGHT_RED}Reboot denied.${NC}"  
    sleep 3 
   fi
else
echo -e "${GREEN}Running   version >>: $running_kernel ${NC}"
inxi
echo -e "${BLUE}Installed version >>: $installed_kernel ${NC}"
uname -a
sleep 1 
echo -e "The running kernel $running_kernel ${GREEN}matches${NC} the installed kernel $installed_kernel. ${YELLOW}No reboot required.${NC}"
  echo $USER "@" $HOSTNAME
if [[ $uptime_seconds -ge $((3 * 24 * 3600)) ]]; then

echo -e "${RED} The system has been running for longer than three days. ${NC}"  
echo -e "${YELLOW} System uptime: $days days, $hours hours, $minutes minutes ${NC}"
    read -p "Would you like to reboot now? (Y/n): " choice
    if [[ $choice != [Nn] ]]; then
      echo -e "${RED} Rebooting... $USER @ $HOSTNAME ($HOST_IP) ${NC}"
      # Uncomment the following line to perform the reboot
      sudo reboot
        sleep 10
    else
      echo -e "${RED} Reboot skipped. $USER@$HOSTNAME ($HOST_IP) ${NC} " && sleep 3
    fi
  else

echo -e "${GREEN} So good news! ${NC} $USER@$HOSTNAME ($HOST_IP)"   
echo -e " The system has ${GREEN}not${NC} been running for longer than ${YELLOW}three${NC} days. ${RED}No reboot required. ${NC}"
echo -e "${GREEN} System uptime: $days days, $hours hours, $minutes minutes ${NC}"
echo "uptime $USER@$HOSTNAME ($HOST_IP)"
uptime
users 
last 5
sleep 6
echo $USER "@" $HOSTNAME
    # Default to "no" if running for less than three days
    read -p "Reboot Anyway? (y/N): " choice
    if [[ $choice == [Yy] ]]; then
      echo -e "${RED} Rebooting... after 10 sec $USER@$HOSTNAME ($HOST_IP) ${NC}"
       sleep 4 
       screenfetch
       inxi  
       uname -a
      echo -e " ${RED} byah $USER@$HOSTNAME $HOST_IP ${NC} " && sleep 3
       sudo reboot
       sleep 10
    else
      echo -e "${GREEN} Reboot Skipped. $USER@$HOSTNAME ($HOST_IP) ${NC}"
    fi
  fi
fi

echo "$USER@$HOSTNAME"
read -p "Run Speedtest? (Y/n): " response

if [[ -z $response || $response == "y" || $response == "Y" ]]; then
    echo "$USER@$HOSTNAME speedtest"
    if command -v lolcat &> /dev/null; then
        speedtest --secure | lolcat
    else
        speedtest --secure
    fi
    sleep 3
elif [[ $response == "n" || $response == "N" ]]; then
    echo "Not running speedtest : System uptime: $(uptime)"
    sleep 4
else
    echo "Invalid input."
fi


echo $USER "@" $HOSTNAME
who -a && last -n 6
sleep 4
inxi
uname -a
echo -e "Current Running kernel ($running_kernel) ; Current Installed kernel ($installed_kernel)."
echo -e "${GREEN} Byah.!. $USER@$HOSTNAME ($HOST_IP) ${NC}"
sleep 6
exit; 
