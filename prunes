#!/bin/bash
echo "## To use this in cli use"
echo "sudo nano /bin/usr/prunes
# copy the next 3 lines into it with, and chmod it to 755  
#!/bin/bash
bash <(curl -s https://git.aevl.net/tek/umupdate/raw/branch/main/prunes)
echo 'bye';";
echo "#To use run"
echo "bash prunes"

echo "Starting!"
echo "Setting functions"
# Function to check and copy SSH key to a remote host if needed
function copy_ssh_key() {
    if [[ ! -f ~/.ssh/id_rsa.pub ]]; then
        echo "SSH key not found. Generating a new SSH key..."
        ssh-keygen -t rsa
    fi

    # Check if the SSH key is already present on the remote host
    if ! ssh-add -L | grep -qF "$(cat ~/.ssh/id_rsa.pub)"; then
        #read -p "Enter the IP address or hostname of the remote host: " ip
        echo "Current client $ip"
        ssh-copy-id "$ip"
    else
        echo "SSH key is already copied to the remote host. No need to copy again."
    fi
}

# Function to check if Pi-hole is installed and running on a host
function check_pihole {
  # Check if the Pi-hole service is running
  if ssh -q -o ConnectTimeout=1 $1 "systemctl is-active pihole-FTL.service &> /dev/null"; then
    # Check if the Pi-hole web interface is accessible
    if curl -s -I -H "Host: pi.hole" http://$1/admin/ &> /dev/null; then
      return 0  # Pi-hole is installed and running
    fi
  fi
  return 1  # Pi-hole is not installed or not running
}
echo "done.."

#echo "Retrieving ARP table"
# Retrieve IP addresses from ARP table
#arp_ip_list=$(arp -a | awk '{print $2}' | sed 's/[()]//g')
#echo "$arp_ip_list done..."

echo "Retrieving active clients over the bridge"
# Retrieve active clients in the bridge
#bridge_clients=$(brctl showmacs virbr0 | awk '{if (NR > 1) print $2}')
bridge_clients=$(ip neigh show dev virbr0 | awk '{print $1}') && echo $bridge_clients
echo "$bridge_clients done..."

# Retrieve Tailscale client IP addresses from 'tailscale status' command
#tailscale_ip_list=$(tailscale status | grep -oE '10\.[0-9]+\.[0-9]+\.[0-9]+')

echo "Retrieving custom_ip_list"
# custom list put the next line in a new file called custom_ip_list
#custom_ip_list="0.0.0.0"$'\n'"0.0.0.0"
#old#cat ~/custom_ip_list
custom_ip_list=$(grep -E -o '([0-9]{1,3}\.){3}[0-9]{1,3}' ~/custom_ip_list)
echo "#custom_ip_list  done..."
sleep 2
echo "done..."

echo "combine the list"
# Combine the IP lists
#withARP#ip_list="$bridge_clients"$'\n'"$custom_ip_list"$'\n'"$arp_ip_list"$'\n'"$tailscale_ip_list"
ip_list="$bridge_clients"$'\n'"$custom_ip_list"$'\n'"$tailscale_ip_list"
echo "$ip_list  done..."

echo "Working this out"
# Iterate over each IP address and perform SSH connection

for ip in $ip_list; do
    # Perform SSH connection to the device
     echo "Connecting to $ip"
     # Call ssh-copy-id function
    copy_ssh_key
    if check_pihole $ip; then
      echo "Pi-hole detected on $ip skipping"
    else
      echo "Pruning $ip"
   ssh -ty $ip "bash <(curl -s https://git.aevl.net/tek/umupdate/raw/branch/main/prune)"
    fi
echo "moving on from $ip"
done