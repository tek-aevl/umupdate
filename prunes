#!/bin/bash
echo "## To use this in cli use"
echo "sudo nano /bin/usr/prunes
# copy the next 3 lines into it with, and chmod it to 755  
#!/bin/bash
bash <(curl -s https://git.aevl.net/tek/umupdate/raw/branch/main/prunes)
echo 'bye';";
echo "#To use run"
echo "bash prunes"
sleep 3

# Function to check and copy SSH key to a remote host if needed
function copy_ssh_key() {
    if [[ ! -f ~/.ssh/id_rsa.pub ]]; then
        echo "SSH key not found. Generating a new SSH key..."
        ssh-keygen -t rsa
    fi

    # Check if the SSH key is already present on the remote host
    if ! ssh-add -L | grep -qF "$(cat ~/.ssh/id_rsa.pub)"; then
        #read -p "Enter the IP address or hostname of the remote host: " ip
        echo "Current client $ip"
        ssh-copy-id "$ip"
    else
        echo "SSH key is already copied to the remote host. No need to copy again."
    fi
}


# Retrieve IP addresses from ARP table
arp_ip_list=$(arp -a | awk '{print $2}' | sed 's/[()]//g')

# Retrieve active clients in the bridge
bridge_clients=$(brctl showmacs virbr0 | awk '{if (NR > 1) print $2}')

# Retrieve Tailscale client IP addresses from 'tailscale status' command
#tailscale_ip_list=$(tailscale status | grep -oE '10\.[0-9]+\.[0-9]+\.[0-9]+')

# custom list 
custom_ip_list="100.66.191.44"$'\n'"100.66.191.44"

# Combine the IP lists
ip_list="$bridge_clients"$'\n'"$custom_ip_list"$'\n'"$arp_ip_list"$'\n'"$tailscale_ip_list"

# Iterate over each IP address and perform SSH connection
for ip in $ip_list; do
    # Perform SSH connection to the device
       echo "Connecting to $ip"
     # Call ssh-copy-id function
       copy_ssh_key
     echo "Running Prune on $ip"
   ssh -ty $ip "bash <(curl -s https://git.aevl.net/tek/umupdate/raw/branch/main/prune)"
     echo "Finished Running Prune on $ip"
done